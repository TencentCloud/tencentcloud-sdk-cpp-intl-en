/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TENCENTCLOUD_WEDATA_V20250806_MODEL_CREATEDATABACKFILLPLANREQUEST_H_
#define TENCENTCLOUD_WEDATA_V20250806_MODEL_CREATEDATABACKFILLPLANREQUEST_H_

#include <string>
#include <vector>
#include <map>
#include <tencentcloud/core/AbstractModel.h>
#include <tencentcloud/wedata/v20250806/model/DataBackfillRange.h>
#include <tencentcloud/wedata/v20250806/model/KVPair.h>


namespace TencentCloud
{
    namespace Wedata
    {
        namespace V20250806
        {
            namespace Model
            {
                /**
                * CreateDataBackfillPlan request structure.
                */
                class CreateDataBackfillPlanRequest : public AbstractModel
                {
                public:
                    CreateDataBackfillPlanRequest();
                    ~CreateDataBackfillPlanRequest() = default;
                    std::string ToJsonString() const;


                    /**
                     * 获取Project ID
                     * @return ProjectId Project ID
                     * 
                     */
                    std::string GetProjectId() const;

                    /**
                     * 设置Project ID
                     * @param _projectId Project ID
                     * 
                     */
                    void SetProjectId(const std::string& _projectId);

                    /**
                     * 判断参数 ProjectId 是否已赋值
                     * @return ProjectId 是否已赋值
                     * 
                     */
                    bool ProjectIdHasBeenSet() const;

                    /**
                     * 获取Backfill task collection.
                     * @return TaskIds Backfill task collection.
                     * 
                     */
                    std::vector<std::string> GetTaskIds() const;

                    /**
                     * 设置Backfill task collection.
                     * @param _taskIds Backfill task collection.
                     * 
                     */
                    void SetTaskIds(const std::vector<std::string>& _taskIds);

                    /**
                     * 判断参数 TaskIds 是否已赋值
                     * @return TaskIds 是否已赋值
                     * 
                     */
                    bool TaskIdsHasBeenSet() const;

                    /**
                     * 获取Specifies the data time configuration for the backfill task.
                     * @return DataBackfillRangeList Specifies the data time configuration for the backfill task.
                     * 
                     */
                    std::vector<DataBackfillRange> GetDataBackfillRangeList() const;

                    /**
                     * 设置Specifies the data time configuration for the backfill task.
                     * @param _dataBackfillRangeList Specifies the data time configuration for the backfill task.
                     * 
                     */
                    void SetDataBackfillRangeList(const std::vector<DataBackfillRange>& _dataBackfillRangeList);

                    /**
                     * 判断参数 DataBackfillRangeList 是否已赋值
                     * @return DataBackfillRangeList 是否已赋值
                     * 
                     */
                    bool DataBackfillRangeListHasBeenSet() const;

                    /**
                     * 获取Time zone, default UTC+8.
                     * @return TimeZone Time zone, default UTC+8.
                     * 
                     */
                    std::string GetTimeZone() const;

                    /**
                     * 设置Time zone, default UTC+8.
                     * @param _timeZone Time zone, default UTC+8.
                     * 
                     */
                    void SetTimeZone(const std::string& _timeZone);

                    /**
                     * 判断参数 TimeZone 是否已赋值
                     * @return TimeZone 是否已赋值
                     * 
                     */
                    bool TimeZoneHasBeenSet() const;

                    /**
                     * 获取Backfill plan name. if left empty, a string of characters is randomly generated by system.
                     * @return DataBackfillPlanName Backfill plan name. if left empty, a string of characters is randomly generated by system.
                     * 
                     */
                    std::string GetDataBackfillPlanName() const;

                    /**
                     * 设置Backfill plan name. if left empty, a string of characters is randomly generated by system.
                     * @param _dataBackfillPlanName Backfill plan name. if left empty, a string of characters is randomly generated by system.
                     * 
                     */
                    void SetDataBackfillPlanName(const std::string& _dataBackfillPlanName);

                    /**
                     * 判断参数 DataBackfillPlanName 是否已赋值
                     * @return DataBackfillPlanName 是否已赋值
                     * 
                     */
                    bool DataBackfillPlanNameHasBeenSet() const;

                    /**
                     * 获取Check parent task type. valid values: NONE (do not check ALL), ALL (check ALL upstream parent tasks), MAKE_SCOPE (only check in the currently selected tasks of the backfill plan). default: NONE (do not check).
                     * @return CheckParentType Check parent task type. valid values: NONE (do not check ALL), ALL (check ALL upstream parent tasks), MAKE_SCOPE (only check in the currently selected tasks of the backfill plan). default: NONE (do not check).
                     * 
                     */
                    std::string GetCheckParentType() const;

                    /**
                     * 设置Check parent task type. valid values: NONE (do not check ALL), ALL (check ALL upstream parent tasks), MAKE_SCOPE (only check in the currently selected tasks of the backfill plan). default: NONE (do not check).
                     * @param _checkParentType Check parent task type. valid values: NONE (do not check ALL), ALL (check ALL upstream parent tasks), MAKE_SCOPE (only check in the currently selected tasks of the backfill plan). default: NONE (do not check).
                     * 
                     */
                    void SetCheckParentType(const std::string& _checkParentType);

                    /**
                     * 判断参数 CheckParentType 是否已赋值
                     * @return CheckParentType 是否已赋值
                     * 
                     */
                    bool CheckParentTypeHasBeenSet() const;

                    /**
                     * 获取Specifies whether to ignore event dependency for backfill. default true.
                     * @return SkipEventListening Specifies whether to ignore event dependency for backfill. default true.
                     * 
                     */
                    bool GetSkipEventListening() const;

                    /**
                     * 设置Specifies whether to ignore event dependency for backfill. default true.
                     * @param _skipEventListening Specifies whether to ignore event dependency for backfill. default true.
                     * 
                     */
                    void SetSkipEventListening(const bool& _skipEventListening);

                    /**
                     * 判断参数 SkipEventListening 是否已赋值
                     * @return SkipEventListening 是否已赋值
                     * 
                     */
                    bool SkipEventListeningHasBeenSet() const;

                    /**
                     * 获取Custom workflow self-dependency. valid values: yes or no. if not configured, use the original workflow self-dependency.
                     * @return RedefineSelfWorkflowDependency Custom workflow self-dependency. valid values: yes or no. if not configured, use the original workflow self-dependency.
                     * 
                     */
                    std::string GetRedefineSelfWorkflowDependency() const;

                    /**
                     * 设置Custom workflow self-dependency. valid values: yes or no. if not configured, use the original workflow self-dependency.
                     * @param _redefineSelfWorkflowDependency Custom workflow self-dependency. valid values: yes or no. if not configured, use the original workflow self-dependency.
                     * 
                     */
                    void SetRedefineSelfWorkflowDependency(const std::string& _redefineSelfWorkflowDependency);

                    /**
                     * 判断参数 RedefineSelfWorkflowDependency 是否已赋值
                     * @return RedefineSelfWorkflowDependency 是否已赋值
                     * 
                     */
                    bool RedefineSelfWorkflowDependencyHasBeenSet() const;

                    /**
                     * 获取Customizes the degree of concurrency for instance running. if without configuring, use the existing self-dependent of the task.
                     * @return RedefineParallelNum Customizes the degree of concurrency for instance running. if without configuring, use the existing self-dependent of the task.
                     * 
                     */
                    uint64_t GetRedefineParallelNum() const;

                    /**
                     * 设置Customizes the degree of concurrency for instance running. if without configuring, use the existing self-dependent of the task.
                     * @param _redefineParallelNum Customizes the degree of concurrency for instance running. if without configuring, use the existing self-dependent of the task.
                     * 
                     */
                    void SetRedefineParallelNum(const uint64_t& _redefineParallelNum);

                    /**
                     * 判断参数 RedefineParallelNum 是否已赋值
                     * @return RedefineParallelNum 是否已赋值
                     * 
                     */
                    bool RedefineParallelNumHasBeenSet() const;

                    /**
                     * 获取Scheduling resource group id. if left empty, indicates usage of the original task scheduling execution resource group.
                     * @return SchedulerResourceGroupId Scheduling resource group id. if left empty, indicates usage of the original task scheduling execution resource group.
                     * 
                     */
                    std::string GetSchedulerResourceGroupId() const;

                    /**
                     * 设置Scheduling resource group id. if left empty, indicates usage of the original task scheduling execution resource group.
                     * @param _schedulerResourceGroupId Scheduling resource group id. if left empty, indicates usage of the original task scheduling execution resource group.
                     * 
                     */
                    void SetSchedulerResourceGroupId(const std::string& _schedulerResourceGroupId);

                    /**
                     * 判断参数 SchedulerResourceGroupId 是否已赋值
                     * @return SchedulerResourceGroupId 是否已赋值
                     * 
                     */
                    bool SchedulerResourceGroupIdHasBeenSet() const;

                    /**
                     * 获取Integration task resource group id. indicates usage of the original task scheduling execution resource group if empty.
                     * @return IntegrationResourceGroupId Integration task resource group id. indicates usage of the original task scheduling execution resource group if empty.
                     * 
                     */
                    std::string GetIntegrationResourceGroupId() const;

                    /**
                     * 设置Integration task resource group id. indicates usage of the original task scheduling execution resource group if empty.
                     * @param _integrationResourceGroupId Integration task resource group id. indicates usage of the original task scheduling execution resource group if empty.
                     * 
                     */
                    void SetIntegrationResourceGroupId(const std::string& _integrationResourceGroupId);

                    /**
                     * 判断参数 IntegrationResourceGroupId 是否已赋值
                     * @return IntegrationResourceGroupId 是否已赋值
                     * 
                     */
                    bool IntegrationResourceGroupIdHasBeenSet() const;

                    /**
                     * 获取Custom parameter. re-specifies the task's parameters to facilitate the execution of new logic by replenished instances.
                     * @return RedefineParamList Custom parameter. re-specifies the task's parameters to facilitate the execution of new logic by replenished instances.
                     * 
                     */
                    std::vector<KVPair> GetRedefineParamList() const;

                    /**
                     * 设置Custom parameter. re-specifies the task's parameters to facilitate the execution of new logic by replenished instances.
                     * @param _redefineParamList Custom parameter. re-specifies the task's parameters to facilitate the execution of new logic by replenished instances.
                     * 
                     */
                    void SetRedefineParamList(const std::vector<KVPair>& _redefineParamList);

                    /**
                     * 判断参数 RedefineParamList 是否已赋值
                     * @return RedefineParamList 是否已赋值
                     * 
                     */
                    bool RedefineParamListHasBeenSet() const;

                    /**
                     * 获取Backfill Execution Order - The execution order for backfill instances based on their data time. Effective only when both conditions are met:

1. Must be the same cycle task.

2. Priority is given to dependency order. If no dependencies apply, execution follows the configured order.

Valid values:

-NORMAL: No specific order (default)

-ORDER: Execute in chronological order

-REVERSE: Execute in reverse chronological order
                     * @return DataTimeOrder Backfill Execution Order - The execution order for backfill instances based on their data time. Effective only when both conditions are met:

1. Must be the same cycle task.

2. Priority is given to dependency order. If no dependencies apply, execution follows the configured order.

Valid values:

-NORMAL: No specific order (default)

-ORDER: Execute in chronological order

-REVERSE: Execute in reverse chronological order
                     * 
                     */
                    std::string GetDataTimeOrder() const;

                    /**
                     * 设置Backfill Execution Order - The execution order for backfill instances based on their data time. Effective only when both conditions are met:

1. Must be the same cycle task.

2. Priority is given to dependency order. If no dependencies apply, execution follows the configured order.

Valid values:

-NORMAL: No specific order (default)

-ORDER: Execute in chronological order

-REVERSE: Execute in reverse chronological order
                     * @param _dataTimeOrder Backfill Execution Order - The execution order for backfill instances based on their data time. Effective only when both conditions are met:

1. Must be the same cycle task.

2. Priority is given to dependency order. If no dependencies apply, execution follows the configured order.

Valid values:

-NORMAL: No specific order (default)

-ORDER: Execute in chronological order

-REVERSE: Execute in reverse chronological order
                     * 
                     */
                    void SetDataTimeOrder(const std::string& _dataTimeOrder);

                    /**
                     * 判断参数 DataTimeOrder 是否已赋值
                     * @return DataTimeOrder 是否已赋值
                     * 
                     */
                    bool DataTimeOrderHasBeenSet() const;

                    /**
                     * 获取Backfill Instance Regeneration Cycle - If set, this will redefine the generation cycle of backfill task instances. Currently, only daily instances can be converted into instances generated on the first day of each month.

Valid value:

MONTH_CYCLE: Monthly
                     * @return RedefineCycleType Backfill Instance Regeneration Cycle - If set, this will redefine the generation cycle of backfill task instances. Currently, only daily instances can be converted into instances generated on the first day of each month.

Valid value:

MONTH_CYCLE: Monthly
                     * 
                     */
                    std::string GetRedefineCycleType() const;

                    /**
                     * 设置Backfill Instance Regeneration Cycle - If set, this will redefine the generation cycle of backfill task instances. Currently, only daily instances can be converted into instances generated on the first day of each month.

Valid value:

MONTH_CYCLE: Monthly
                     * @param _redefineCycleType Backfill Instance Regeneration Cycle - If set, this will redefine the generation cycle of backfill task instances. Currently, only daily instances can be converted into instances generated on the first day of each month.

Valid value:

MONTH_CYCLE: Monthly
                     * 
                     */
                    void SetRedefineCycleType(const std::string& _redefineCycleType);

                    /**
                     * 判断参数 RedefineCycleType 是否已赋值
                     * @return RedefineCycleType 是否已赋值
                     * 
                     */
                    bool RedefineCycleTypeHasBeenSet() const;

                private:

                    /**
                     * Project ID
                     */
                    std::string m_projectId;
                    bool m_projectIdHasBeenSet;

                    /**
                     * Backfill task collection.
                     */
                    std::vector<std::string> m_taskIds;
                    bool m_taskIdsHasBeenSet;

                    /**
                     * Specifies the data time configuration for the backfill task.
                     */
                    std::vector<DataBackfillRange> m_dataBackfillRangeList;
                    bool m_dataBackfillRangeListHasBeenSet;

                    /**
                     * Time zone, default UTC+8.
                     */
                    std::string m_timeZone;
                    bool m_timeZoneHasBeenSet;

                    /**
                     * Backfill plan name. if left empty, a string of characters is randomly generated by system.
                     */
                    std::string m_dataBackfillPlanName;
                    bool m_dataBackfillPlanNameHasBeenSet;

                    /**
                     * Check parent task type. valid values: NONE (do not check ALL), ALL (check ALL upstream parent tasks), MAKE_SCOPE (only check in the currently selected tasks of the backfill plan). default: NONE (do not check).
                     */
                    std::string m_checkParentType;
                    bool m_checkParentTypeHasBeenSet;

                    /**
                     * Specifies whether to ignore event dependency for backfill. default true.
                     */
                    bool m_skipEventListening;
                    bool m_skipEventListeningHasBeenSet;

                    /**
                     * Custom workflow self-dependency. valid values: yes or no. if not configured, use the original workflow self-dependency.
                     */
                    std::string m_redefineSelfWorkflowDependency;
                    bool m_redefineSelfWorkflowDependencyHasBeenSet;

                    /**
                     * Customizes the degree of concurrency for instance running. if without configuring, use the existing self-dependent of the task.
                     */
                    uint64_t m_redefineParallelNum;
                    bool m_redefineParallelNumHasBeenSet;

                    /**
                     * Scheduling resource group id. if left empty, indicates usage of the original task scheduling execution resource group.
                     */
                    std::string m_schedulerResourceGroupId;
                    bool m_schedulerResourceGroupIdHasBeenSet;

                    /**
                     * Integration task resource group id. indicates usage of the original task scheduling execution resource group if empty.
                     */
                    std::string m_integrationResourceGroupId;
                    bool m_integrationResourceGroupIdHasBeenSet;

                    /**
                     * Custom parameter. re-specifies the task's parameters to facilitate the execution of new logic by replenished instances.
                     */
                    std::vector<KVPair> m_redefineParamList;
                    bool m_redefineParamListHasBeenSet;

                    /**
                     * Backfill Execution Order - The execution order for backfill instances based on their data time. Effective only when both conditions are met:

1. Must be the same cycle task.

2. Priority is given to dependency order. If no dependencies apply, execution follows the configured order.

Valid values:

-NORMAL: No specific order (default)

-ORDER: Execute in chronological order

-REVERSE: Execute in reverse chronological order
                     */
                    std::string m_dataTimeOrder;
                    bool m_dataTimeOrderHasBeenSet;

                    /**
                     * Backfill Instance Regeneration Cycle - If set, this will redefine the generation cycle of backfill task instances. Currently, only daily instances can be converted into instances generated on the first day of each month.

Valid value:

MONTH_CYCLE: Monthly
                     */
                    std::string m_redefineCycleType;
                    bool m_redefineCycleTypeHasBeenSet;

                };
            }
        }
    }
}

#endif // !TENCENTCLOUD_WEDATA_V20250806_MODEL_CREATEDATABACKFILLPLANREQUEST_H_

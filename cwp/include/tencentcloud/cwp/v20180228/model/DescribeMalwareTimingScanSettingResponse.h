/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TENCENTCLOUD_CWP_V20180228_MODEL_DESCRIBEMALWARETIMINGSCANSETTINGRESPONSE_H_
#define TENCENTCLOUD_CWP_V20180228_MODEL_DESCRIBEMALWARETIMINGSCANSETTINGRESPONSE_H_

#include <string>
#include <vector>
#include <map>
#include <tencentcloud/core/AbstractModel.h>


namespace TencentCloud
{
    namespace Cwp
    {
        namespace V20180228
        {
            namespace Model
            {
                /**
                * DescribeMalwareTimingScanSetting response structure.
                */
                class DescribeMalwareTimingScanSettingResponse : public AbstractModel
                {
                public:
                    DescribeMalwareTimingScanSettingResponse();
                    ~DescribeMalwareTimingScanSettingResponse() = default;
                    CoreInternalOutcome Deserialize(const std::string &payload);
                    std::string ToJsonString() const;


                    /**
                     * 获取Detection mode: 0 - full disk detection; 1 - rapid detection
                     * @return CheckPattern Detection mode: 0 - full disk detection; 1 - rapid detection
                     * 
                     */
                    uint64_t GetCheckPattern() const;

                    /**
                     * 判断参数 CheckPattern 是否已赋值
                     * @return CheckPattern 是否已赋值
                     * 
                     */
                    bool CheckPatternHasBeenSet() const;

                    /**
                     * 获取Detection cycle; start time
                     * @return StartTime Detection cycle; start time
                     * 
                     */
                    std::string GetStartTime() const;

                    /**
                     * 判断参数 StartTime 是否已赋值
                     * @return StartTime 是否已赋值
                     * 
                     */
                    bool StartTimeHasBeenSet() const;

                    /**
                     * 获取Detection cycle; timeout end time
                     * @return EndTime Detection cycle; timeout end time
                     * 
                     */
                    std::string GetEndTime() const;

                    /**
                     * 判断参数 EndTime 是否已赋值
                     * @return EndTime 是否已赋值
                     * 
                     */
                    bool EndTimeHasBeenSet() const;

                    /**
                     * 获取Whether all servers: 1 - all; 2 - specified
                     * @return IsGlobal Whether all servers: 1 - all; 2 - specified
                     * 
                     */
                    uint64_t GetIsGlobal() const;

                    /**
                     * 判断参数 IsGlobal 是否已赋值
                     * @return IsGlobal 是否已赋值
                     * 
                     */
                    bool IsGlobalHasBeenSet() const;

                    /**
                     * 获取When you select servers, host quuid is required.
Note: This field may return null, indicating that no valid values can be obtained.
                     * @return QuuidList When you select servers, host quuid is required.
Note: This field may return null, indicating that no valid values can be obtained.
                     * 
                     */
                    std::vector<std::string> GetQuuidList() const;

                    /**
                     * 判断参数 QuuidList 是否已赋值
                     * @return QuuidList 是否已赋值
                     * 
                     */
                    bool QuuidListHasBeenSet() const;

                    /**
                     * 获取Monitoring mode: 0 - standard; 1 - deep
                     * @return MonitoringPattern Monitoring mode: 0 - standard; 1 - deep
                     * 
                     */
                    uint64_t GetMonitoringPattern() const;

                    /**
                     * 判断参数 MonitoringPattern 是否已赋值
                     * @return MonitoringPattern 是否已赋值
                     * 
                     */
                    bool MonitoringPatternHasBeenSet() const;

                    /**
                     * 获取Cycle: 1 - daily
                     * @return Cycle Cycle: 1 - daily
                     * 
                     */
                    uint64_t GetCycle() const;

                    /**
                     * 判断参数 Cycle 是否已赋值
                     * @return Cycle 是否已赋值
                     * 
                     */
                    bool CycleHasBeenSet() const;

                    /**
                     * 获取Scheduled detection switch: 0 - disable; 1 - enable
                     * @return EnableScan Scheduled detection switch: 0 - disable; 1 - enable
                     * 
                     */
                    int64_t GetEnableScan() const;

                    /**
                     * 判断参数 EnableScan 是否已赋值
                     * @return EnableScan 是否已赋值
                     * 
                     */
                    bool EnableScanHasBeenSet() const;

                    /**
                     * 获取Unique ID
                     * @return Id Unique ID
                     * 
                     */
                    int64_t GetId() const;

                    /**
                     * 判断参数 Id 是否已赋值
                     * @return Id 是否已赋值
                     * 
                     */
                    bool IdHasBeenSet() const;

                    /**
                     * 获取Real-time monitoring: 0 - disable 1 - enable
                     * @return RealTimeMonitoring Real-time monitoring: 0 - disable 1 - enable
                     * 
                     */
                    int64_t GetRealTimeMonitoring() const;

                    /**
                     * 判断参数 RealTimeMonitoring 是否已赋值
                     * @return RealTimeMonitoring 是否已赋值
                     * 
                     */
                    bool RealTimeMonitoringHasBeenSet() const;

                    /**
                     * 获取Whether to isolate automatically: 1 - yes; 0 - no
                     * @return AutoIsolation Whether to isolate automatically: 1 - yes; 0 - no
                     * 
                     */
                    uint64_t GetAutoIsolation() const;

                    /**
                     * 判断参数 AutoIsolation 是否已赋值
                     * @return AutoIsolation 是否已赋值
                     * 
                     */
                    bool AutoIsolationHasBeenSet() const;

                    /**
                     * 获取One-click scan timeout duration, such as 1800 seconds
                     * @return ClickTimeout One-click scan timeout duration, such as 1800 seconds
                     * 
                     */
                    uint64_t GetClickTimeout() const;

                    /**
                     * 判断参数 ClickTimeout 是否已赋值
                     * @return ClickTimeout 是否已赋值
                     * 
                     */
                    bool ClickTimeoutHasBeenSet() const;

                    /**
                     * 获取Whether to terminate the process: 1: terminate; 0: not terminate. It is effective only if automatic isolation is enabled.
                     * @return KillProcess Whether to terminate the process: 1: terminate; 0: not terminate. It is effective only if automatic isolation is enabled.
                     * 
                     */
                    uint64_t GetKillProcess() const;

                    /**
                     * 判断参数 KillProcess 是否已赋值
                     * @return KillProcess 是否已赋值
                     * 
                     */
                    bool KillProcessHasBeenSet() const;

                    /**
                     * 获取1 - standard mode (only critical and high-risk are reported.); 2 - enhanced mode (critical, high-risk, and medium-risk are reported.); 3 - strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
                     * @return EngineType 1 - standard mode (only critical and high-risk are reported.); 2 - enhanced mode (critical, high-risk, and medium-risk are reported.); 3 - strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
                     * 
                     */
                    uint64_t GetEngineType() const;

                    /**
                     * 判断参数 EngineType 是否已赋值
                     * @return EngineType 是否已赋值
                     * 
                     */
                    bool EngineTypeHasBeenSet() const;

                    /**
                     * 获取Heuristic Engine: 0 - OFF, 1 - ON
                     * @return EnableInspiredEngine Heuristic Engine: 0 - OFF, 1 - ON
                     * 
                     */
                    uint64_t GetEnableInspiredEngine() const;

                    /**
                     * 判断参数 EnableInspiredEngine 是否已赋值
                     * @return EnableInspiredEngine 是否已赋值
                     * 
                     */
                    bool EnableInspiredEngineHasBeenSet() const;

                    /**
                     * 获取Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
                     * @return EnableMemShellScan Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
                     * 
                     */
                    uint64_t GetEnableMemShellScan() const;

                    /**
                     * 判断参数 EnableMemShellScan 是否已赋值
                     * @return EnableMemShellScan 是否已赋值
                     * 
                     */
                    bool EnableMemShellScanHasBeenSet() const;

                    /**
                     * 获取Protection mode: 0 - standard; 1 - enhanced
                     * @return ProtectMode Protection mode: 0 - standard; 1 - enhanced
                     * 
                     */
                    uint64_t GetProtectMode() const;

                    /**
                     * 判断参数 ProtectMode 是否已赋值
                     * @return ProtectMode 是否已赋值
                     * 
                     */
                    bool ProtectModeHasBeenSet() const;

                    /**
                     * 获取Scope of detection: 0 - malicious files other than scripts; 1 - all malicious files
                     * @return ProtectFileScope Scope of detection: 0 - malicious files other than scripts; 1 - all malicious files
                     * 
                     */
                    uint64_t GetProtectFileScope() const;

                    /**
                     * 判断参数 ProtectFileScope 是否已赋值
                     * @return ProtectFileScope 是否已赋值
                     * 
                     */
                    bool ProtectFileScopeHasBeenSet() const;

                private:

                    /**
                     * Detection mode: 0 - full disk detection; 1 - rapid detection
                     */
                    uint64_t m_checkPattern;
                    bool m_checkPatternHasBeenSet;

                    /**
                     * Detection cycle; start time
                     */
                    std::string m_startTime;
                    bool m_startTimeHasBeenSet;

                    /**
                     * Detection cycle; timeout end time
                     */
                    std::string m_endTime;
                    bool m_endTimeHasBeenSet;

                    /**
                     * Whether all servers: 1 - all; 2 - specified
                     */
                    uint64_t m_isGlobal;
                    bool m_isGlobalHasBeenSet;

                    /**
                     * When you select servers, host quuid is required.
Note: This field may return null, indicating that no valid values can be obtained.
                     */
                    std::vector<std::string> m_quuidList;
                    bool m_quuidListHasBeenSet;

                    /**
                     * Monitoring mode: 0 - standard; 1 - deep
                     */
                    uint64_t m_monitoringPattern;
                    bool m_monitoringPatternHasBeenSet;

                    /**
                     * Cycle: 1 - daily
                     */
                    uint64_t m_cycle;
                    bool m_cycleHasBeenSet;

                    /**
                     * Scheduled detection switch: 0 - disable; 1 - enable
                     */
                    int64_t m_enableScan;
                    bool m_enableScanHasBeenSet;

                    /**
                     * Unique ID
                     */
                    int64_t m_id;
                    bool m_idHasBeenSet;

                    /**
                     * Real-time monitoring: 0 - disable 1 - enable
                     */
                    int64_t m_realTimeMonitoring;
                    bool m_realTimeMonitoringHasBeenSet;

                    /**
                     * Whether to isolate automatically: 1 - yes; 0 - no
                     */
                    uint64_t m_autoIsolation;
                    bool m_autoIsolationHasBeenSet;

                    /**
                     * One-click scan timeout duration, such as 1800 seconds
                     */
                    uint64_t m_clickTimeout;
                    bool m_clickTimeoutHasBeenSet;

                    /**
                     * Whether to terminate the process: 1: terminate; 0: not terminate. It is effective only if automatic isolation is enabled.
                     */
                    uint64_t m_killProcess;
                    bool m_killProcessHasBeenSet;

                    /**
                     * 1 - standard mode (only critical and high-risk are reported.); 2 - enhanced mode (critical, high-risk, and medium-risk are reported.); 3 - strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
                     */
                    uint64_t m_engineType;
                    bool m_engineTypeHasBeenSet;

                    /**
                     * Heuristic Engine: 0 - OFF, 1 - ON
                     */
                    uint64_t m_enableInspiredEngine;
                    bool m_enableInspiredEngineHasBeenSet;

                    /**
                     * Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
                     */
                    uint64_t m_enableMemShellScan;
                    bool m_enableMemShellScanHasBeenSet;

                    /**
                     * Protection mode: 0 - standard; 1 - enhanced
                     */
                    uint64_t m_protectMode;
                    bool m_protectModeHasBeenSet;

                    /**
                     * Scope of detection: 0 - malicious files other than scripts; 1 - all malicious files
                     */
                    uint64_t m_protectFileScope;
                    bool m_protectFileScopeHasBeenSet;

                };
            }
        }
    }
}

#endif // !TENCENTCLOUD_CWP_V20180228_MODEL_DESCRIBEMALWARETIMINGSCANSETTINGRESPONSE_H_

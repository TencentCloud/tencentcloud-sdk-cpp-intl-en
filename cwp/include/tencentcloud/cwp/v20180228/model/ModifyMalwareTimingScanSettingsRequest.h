/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TENCENTCLOUD_CWP_V20180228_MODEL_MODIFYMALWARETIMINGSCANSETTINGSREQUEST_H_
#define TENCENTCLOUD_CWP_V20180228_MODEL_MODIFYMALWARETIMINGSCANSETTINGSREQUEST_H_

#include <string>
#include <vector>
#include <map>
#include <tencentcloud/core/AbstractModel.h>


namespace TencentCloud
{
    namespace Cwp
    {
        namespace V20180228
        {
            namespace Model
            {
                /**
                * ModifyMalwareTimingScanSettings request structure.
                */
                class ModifyMalwareTimingScanSettingsRequest : public AbstractModel
                {
                public:
                    ModifyMalwareTimingScanSettingsRequest();
                    ~ModifyMalwareTimingScanSettingsRequest() = default;
                    std::string ToJsonString() const;


                    /**
                     * 获取Detection mode. 0: full disk detection; 1: rapid detection
                     * @return CheckPattern Detection mode. 0: full disk detection; 1: rapid detection
                     * 
                     */
                    uint64_t GetCheckPattern() const;

                    /**
                     * 设置Detection mode. 0: full disk detection; 1: rapid detection
                     * @param _checkPattern Detection mode. 0: full disk detection; 1: rapid detection
                     * 
                     */
                    void SetCheckPattern(const uint64_t& _checkPattern);

                    /**
                     * 判断参数 CheckPattern 是否已赋值
                     * @return CheckPattern 是否已赋值
                     * 
                     */
                    bool CheckPatternHasBeenSet() const;

                    /**
                     * 获取Detection interval start time, such as 02:00:00
                     * @return StartTime Detection interval start time, such as 02:00:00
                     * 
                     */
                    std::string GetStartTime() const;

                    /**
                     * 设置Detection interval start time, such as 02:00:00
                     * @param _startTime Detection interval start time, such as 02:00:00
                     * 
                     */
                    void SetStartTime(const std::string& _startTime);

                    /**
                     * 判断参数 StartTime 是否已赋值
                     * @return StartTime 是否已赋值
                     * 
                     */
                    bool StartTimeHasBeenSet() const;

                    /**
                     * 获取Detection interval timeout end time, such as 04:00:00
                     * @return EndTime Detection interval timeout end time, such as 04:00:00
                     * 
                     */
                    std::string GetEndTime() const;

                    /**
                     * 设置Detection interval timeout end time, such as 04:00:00
                     * @param _endTime Detection interval timeout end time, such as 04:00:00
                     * 
                     */
                    void SetEndTime(const std::string& _endTime);

                    /**
                     * 判断参数 EndTime 是否已赋值
                     * @return EndTime 是否已赋值
                     * 
                     */
                    bool EndTimeHasBeenSet() const;

                    /**
                     * 获取Whether all servers. 1: all; 2: specified
                     * @return IsGlobal Whether all servers. 1: all; 2: specified
                     * 
                     */
                    uint64_t GetIsGlobal() const;

                    /**
                     * 设置Whether all servers. 1: all; 2: specified
                     * @param _isGlobal Whether all servers. 1: all; 2: specified
                     * 
                     */
                    void SetIsGlobal(const uint64_t& _isGlobal);

                    /**
                     * 判断参数 IsGlobal 是否已赋值
                     * @return IsGlobal 是否已赋值
                     * 
                     */
                    bool IsGlobalHasBeenSet() const;

                    /**
                     * 获取Regular detection switch. 0: off; 1: on
                     * @return EnableScan Regular detection switch. 0: off; 1: on
                     * 
                     */
                    uint64_t GetEnableScan() const;

                    /**
                     * 设置Regular detection switch. 0: off; 1: on
                     * @param _enableScan Regular detection switch. 0: off; 1: on
                     * 
                     */
                    void SetEnableScan(const uint64_t& _enableScan);

                    /**
                     * 判断参数 EnableScan 是否已赋值
                     * @return EnableScan 是否已赋值
                     * 
                     */
                    bool EnableScanHasBeenSet() const;

                    /**
                     * 获取Monitoring mode. 0: standard; 1: deep
                     * @return MonitoringPattern Monitoring mode. 0: standard; 1: deep
                     * 
                     */
                    uint64_t GetMonitoringPattern() const;

                    /**
                     * 设置Monitoring mode. 0: standard; 1: deep
                     * @param _monitoringPattern Monitoring mode. 0: standard; 1: deep
                     * 
                     */
                    void SetMonitoringPattern(const uint64_t& _monitoringPattern);

                    /**
                     * 判断参数 MonitoringPattern 是否已赋值
                     * @return MonitoringPattern 是否已赋值
                     * 
                     */
                    bool MonitoringPatternHasBeenSet() const;

                    /**
                     * 获取Scan interval: defaults to 1 per day
                     * @return Cycle Scan interval: defaults to 1 per day
                     * 
                     */
                    uint64_t GetCycle() const;

                    /**
                     * 设置Scan interval: defaults to 1 per day
                     * @param _cycle Scan interval: defaults to 1 per day
                     * 
                     */
                    void SetCycle(const uint64_t& _cycle);

                    /**
                     * 判断参数 Cycle 是否已赋值
                     * @return Cycle 是否已赋值
                     * 
                     */
                    bool CycleHasBeenSet() const;

                    /**
                     * 获取Real-time monitoring. 0: off; 1: on
                     * @return RealTimeMonitoring Real-time monitoring. 0: off; 1: on
                     * 
                     */
                    uint64_t GetRealTimeMonitoring() const;

                    /**
                     * 设置Real-time monitoring. 0: off; 1: on
                     * @param _realTimeMonitoring Real-time monitoring. 0: off; 1: on
                     * 
                     */
                    void SetRealTimeMonitoring(const uint64_t& _realTimeMonitoring);

                    /**
                     * 判断参数 RealTimeMonitoring 是否已赋值
                     * @return RealTimeMonitoring 是否已赋值
                     * 
                     */
                    bool RealTimeMonitoringHasBeenSet() const;

                    /**
                     * 获取Required for specified servers, a string array of host QUUIDs
                     * @return QuuidList Required for specified servers, a string array of host QUUIDs
                     * 
                     */
                    std::vector<std::string> GetQuuidList() const;

                    /**
                     * 设置Required for specified servers, a string array of host QUUIDs
                     * @param _quuidList Required for specified servers, a string array of host QUUIDs
                     * 
                     */
                    void SetQuuidList(const std::vector<std::string>& _quuidList);

                    /**
                     * 判断参数 QuuidList 是否已赋值
                     * @return QuuidList 是否已赋值
                     * 
                     */
                    bool QuuidListHasBeenSet() const;

                    /**
                     * 获取Whether to apply automatic isolation. 1: yes; 0: no
                     * @return AutoIsolation Whether to apply automatic isolation. 1: yes; 0: no
                     * 
                     */
                    uint64_t GetAutoIsolation() const;

                    /**
                     * 设置Whether to apply automatic isolation. 1: yes; 0: no
                     * @param _autoIsolation Whether to apply automatic isolation. 1: yes; 0: no
                     * 
                     */
                    void SetAutoIsolation(const uint64_t& _autoIsolation);

                    /**
                     * 判断参数 AutoIsolation 是否已赋值
                     * @return AutoIsolation 是否已赋值
                     * 
                     */
                    bool AutoIsolationHasBeenSet() const;

                    /**
                     * 获取Whether to terminate the process. 1: terminate; 0: not terminate
                     * @return KillProcess Whether to terminate the process. 1: terminate; 0: not terminate
                     * 
                     */
                    uint64_t GetKillProcess() const;

                    /**
                     * 设置Whether to terminate the process. 1: terminate; 0: not terminate
                     * @param _killProcess Whether to terminate the process. 1: terminate; 0: not terminate
                     * 
                     */
                    void SetKillProcess(const uint64_t& _killProcess);

                    /**
                     * 判断参数 KillProcess 是否已赋值
                     * @return KillProcess 是否已赋值
                     * 
                     */
                    bool KillProcessHasBeenSet() const;

                    /**
                     * 获取1: clean up; 0: not clean up
<li>This operation will fix tampered system commands, scheduled tasks, and other system files. Please ensure that yum/apt is available during the operation.</li>
                     * @return DoClean 1: clean up; 0: not clean up
<li>This operation will fix tampered system commands, scheduled tasks, and other system files. Please ensure that yum/apt is available during the operation.</li>
                     * 
                     */
                    uint64_t GetDoClean() const;

                    /**
                     * 设置1: clean up; 0: not clean up
<li>This operation will fix tampered system commands, scheduled tasks, and other system files. Please ensure that yum/apt is available during the operation.</li>
                     * @param _doClean 1: clean up; 0: not clean up
<li>This operation will fix tampered system commands, scheduled tasks, and other system files. Please ensure that yum/apt is available during the operation.</li>
                     * 
                     */
                    void SetDoClean(const uint64_t& _doClean);

                    /**
                     * 判断参数 DoClean 是否已赋值
                     * @return DoClean 是否已赋值
                     * 
                     */
                    bool DoCleanHasBeenSet() const;

                    /**
                     * 获取1: standard mode (only critical and high-risk are reported.); 2: enhanced mode (critical, high-risk, and medium-risk are reported.); 3: strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
                     * @return EngineType 1: standard mode (only critical and high-risk are reported.); 2: enhanced mode (critical, high-risk, and medium-risk are reported.); 3: strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
                     * 
                     */
                    uint64_t GetEngineType() const;

                    /**
                     * 设置1: standard mode (only critical and high-risk are reported.); 2: enhanced mode (critical, high-risk, and medium-risk are reported.); 3: strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
                     * @param _engineType 1: standard mode (only critical and high-risk are reported.); 2: enhanced mode (critical, high-risk, and medium-risk are reported.); 3: strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
                     * 
                     */
                    void SetEngineType(const uint64_t& _engineType);

                    /**
                     * 判断参数 EngineType 是否已赋值
                     * @return EngineType 是否已赋值
                     * 
                     */
                    bool EngineTypeHasBeenSet() const;

                    /**
                     * 获取Heuristic Engine Switch: 0 OFF, 1 ON.
                     * @return EnableInspiredEngine Heuristic Engine Switch: 0 OFF, 1 ON.
                     * 
                     */
                    uint64_t GetEnableInspiredEngine() const;

                    /**
                     * 设置Heuristic Engine Switch: 0 OFF, 1 ON.
                     * @param _enableInspiredEngine Heuristic Engine Switch: 0 OFF, 1 ON.
                     * 
                     */
                    void SetEnableInspiredEngine(const uint64_t& _enableInspiredEngine);

                    /**
                     * 判断参数 EnableInspiredEngine 是否已赋值
                     * @return EnableInspiredEngine 是否已赋值
                     * 
                     */
                    bool EnableInspiredEngineHasBeenSet() const;

                    /**
                     * 获取Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
                     * @return EnableMemShellScan Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
                     * 
                     */
                    uint64_t GetEnableMemShellScan() const;

                    /**
                     * 设置Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
                     * @param _enableMemShellScan Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
                     * 
                     */
                    void SetEnableMemShellScan(const uint64_t& _enableMemShellScan);

                    /**
                     * 判断参数 EnableMemShellScan 是否已赋值
                     * @return EnableMemShellScan 是否已赋值
                     * 
                     */
                    bool EnableMemShellScanHasBeenSet() const;

                    /**
                     * 获取Protection mode: 0: standard; 1: important period guarantee
                     * @return ProtectMode Protection mode: 0: standard; 1: important period guarantee
                     * 
                     */
                    uint64_t GetProtectMode() const;

                    /**
                     * 设置Protection mode: 0: standard; 1: important period guarantee
                     * @param _protectMode Protection mode: 0: standard; 1: important period guarantee
                     * 
                     */
                    void SetProtectMode(const uint64_t& _protectMode);

                    /**
                     * 判断参数 ProtectMode 是否已赋值
                     * @return ProtectMode 是否已赋值
                     * 
                     */
                    bool ProtectModeHasBeenSet() const;

                    /**
                     * 获取Scope of detection: 0: malicious files other than scripts; 1: all malicious files
                     * @return ProtectFileScope Scope of detection: 0: malicious files other than scripts; 1: all malicious files
                     * 
                     */
                    uint64_t GetProtectFileScope() const;

                    /**
                     * 设置Scope of detection: 0: malicious files other than scripts; 1: all malicious files
                     * @param _protectFileScope Scope of detection: 0: malicious files other than scripts; 1: all malicious files
                     * 
                     */
                    void SetProtectFileScope(const uint64_t& _protectFileScope);

                    /**
                     * 判断参数 ProtectFileScope 是否已赋值
                     * @return ProtectFileScope 是否已赋值
                     * 
                     */
                    bool ProtectFileScopeHasBeenSet() const;

                private:

                    /**
                     * Detection mode. 0: full disk detection; 1: rapid detection
                     */
                    uint64_t m_checkPattern;
                    bool m_checkPatternHasBeenSet;

                    /**
                     * Detection interval start time, such as 02:00:00
                     */
                    std::string m_startTime;
                    bool m_startTimeHasBeenSet;

                    /**
                     * Detection interval timeout end time, such as 04:00:00
                     */
                    std::string m_endTime;
                    bool m_endTimeHasBeenSet;

                    /**
                     * Whether all servers. 1: all; 2: specified
                     */
                    uint64_t m_isGlobal;
                    bool m_isGlobalHasBeenSet;

                    /**
                     * Regular detection switch. 0: off; 1: on
                     */
                    uint64_t m_enableScan;
                    bool m_enableScanHasBeenSet;

                    /**
                     * Monitoring mode. 0: standard; 1: deep
                     */
                    uint64_t m_monitoringPattern;
                    bool m_monitoringPatternHasBeenSet;

                    /**
                     * Scan interval: defaults to 1 per day
                     */
                    uint64_t m_cycle;
                    bool m_cycleHasBeenSet;

                    /**
                     * Real-time monitoring. 0: off; 1: on
                     */
                    uint64_t m_realTimeMonitoring;
                    bool m_realTimeMonitoringHasBeenSet;

                    /**
                     * Required for specified servers, a string array of host QUUIDs
                     */
                    std::vector<std::string> m_quuidList;
                    bool m_quuidListHasBeenSet;

                    /**
                     * Whether to apply automatic isolation. 1: yes; 0: no
                     */
                    uint64_t m_autoIsolation;
                    bool m_autoIsolationHasBeenSet;

                    /**
                     * Whether to terminate the process. 1: terminate; 0: not terminate
                     */
                    uint64_t m_killProcess;
                    bool m_killProcessHasBeenSet;

                    /**
                     * 1: clean up; 0: not clean up
<li>This operation will fix tampered system commands, scheduled tasks, and other system files. Please ensure that yum/apt is available during the operation.</li>
                     */
                    uint64_t m_doClean;
                    bool m_doCleanHasBeenSet;

                    /**
                     * 1: standard mode (only critical and high-risk are reported.); 2: enhanced mode (critical, high-risk, and medium-risk are reported.); 3: strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
                     */
                    uint64_t m_engineType;
                    bool m_engineTypeHasBeenSet;

                    /**
                     * Heuristic Engine Switch: 0 OFF, 1 ON.
                     */
                    uint64_t m_enableInspiredEngine;
                    bool m_enableInspiredEngineHasBeenSet;

                    /**
                     * Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
                     */
                    uint64_t m_enableMemShellScan;
                    bool m_enableMemShellScanHasBeenSet;

                    /**
                     * Protection mode: 0: standard; 1: important period guarantee
                     */
                    uint64_t m_protectMode;
                    bool m_protectModeHasBeenSet;

                    /**
                     * Scope of detection: 0: malicious files other than scripts; 1: all malicious files
                     */
                    uint64_t m_protectFileScope;
                    bool m_protectFileScopeHasBeenSet;

                };
            }
        }
    }
}

#endif // !TENCENTCLOUD_CWP_V20180228_MODEL_MODIFYMALWARETIMINGSCANSETTINGSREQUEST_H_

/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TENCENTCLOUD_CWP_V20180228_MODEL_MODIFYMALWAREWHITELISTREQUEST_H_
#define TENCENTCLOUD_CWP_V20180228_MODEL_MODIFYMALWAREWHITELISTREQUEST_H_

#include <string>
#include <vector>
#include <map>
#include <tencentcloud/core/AbstractModel.h>


namespace TencentCloud
{
    namespace Cwp
    {
        namespace V20180228
        {
            namespace Model
            {
                /**
                * ModifyMalwareWhiteList request structure.
                */
                class ModifyMalwareWhiteListRequest : public AbstractModel
                {
                public:
                    ModifyMalwareWhiteListRequest();
                    ~ModifyMalwareWhiteListRequest() = default;
                    std::string ToJsonString() const;


                    /**
                     * 获取Allowlist mode. 0: MD5 allowlist; 1: custom.
                     * @return Mode Allowlist mode. 0: MD5 allowlist; 1: custom.
                     * 
                     */
                    uint64_t GetMode() const;

                    /**
                     * 设置Allowlist mode. 0: MD5 allowlist; 1: custom.
                     * @param _mode Allowlist mode. 0: MD5 allowlist; 1: custom.
                     * 
                     */
                    void SetMode(const uint64_t& _mode);

                    /**
                     * 判断参数 Mode 是否已赋值
                     * @return Mode 是否已赋值
                     * 
                     */
                    bool ModeHasBeenSet() const;

                    /**
                     * 获取Unique rule ID
                     * @return Id Unique rule ID
                     * 
                     */
                    uint64_t GetId() const;

                    /**
                     * 设置Unique rule ID
                     * @param _id Unique rule ID
                     * 
                     */
                    void SetId(const uint64_t& _id);

                    /**
                     * 判断参数 Id 是否已赋值
                     * @return Id 是否已赋值
                     * 
                     */
                    bool IdHasBeenSet() const;

                    /**
                     * 获取QUUID list
                     * @return QuuidList QUUID list
                     * 
                     */
                    std::vector<std::string> GetQuuidList() const;

                    /**
                     * 设置QUUID list
                     * @param _quuidList QUUID list
                     * 
                     */
                    void SetQuuidList(const std::vector<std::string>& _quuidList);

                    /**
                     * 判断参数 QuuidList 是否已赋值
                     * @return QuuidList 是否已赋值
                     * 
                     */
                    bool QuuidListHasBeenSet() const;

                    /**
                     * 获取Whether the allowlist applies to all hosts. 0: no; 1: yes.
                     * @return IsGlobal Whether the allowlist applies to all hosts. 0: no; 1: yes.
                     * 
                     */
                    uint64_t GetIsGlobal() const;

                    /**
                     * 设置Whether the allowlist applies to all hosts. 0: no; 1: yes.
                     * @param _isGlobal Whether the allowlist applies to all hosts. 0: no; 1: yes.
                     * 
                     */
                    void SetIsGlobal(const uint64_t& _isGlobal);

                    /**
                     * 判断参数 IsGlobal 是否已赋值
                     * @return IsGlobal 是否已赋值
                     * 
                     */
                    bool IsGlobalHasBeenSet() const;

                    /**
                     * 获取Matching pattern; 0 for exact match, 1 for fuzzy match (deprecated)
                     * @return MatchType Matching pattern; 0 for exact match, 1 for fuzzy match (deprecated)
                     * 
                     */
                    uint64_t GetMatchType() const;

                    /**
                     * 设置Matching pattern; 0 for exact match, 1 for fuzzy match (deprecated)
                     * @param _matchType Matching pattern; 0 for exact match, 1 for fuzzy match (deprecated)
                     * 
                     */
                    void SetMatchType(const uint64_t& _matchType);

                    /**
                     * 判断参数 MatchType 是否已赋值
                     * @return MatchType 是否已赋值
                     * 
                     */
                    bool MatchTypeHasBeenSet() const;

                    /**
                     * 获取File Name (regular expression); up to 200 characters in length
                     * @return FileName File Name (regular expression); up to 200 characters in length
                     * 
                     */
                    std::vector<std::string> GetFileName() const;

                    /**
                     * 设置File Name (regular expression); up to 200 characters in length
                     * @param _fileName File Name (regular expression); up to 200 characters in length
                     * 
                     */
                    void SetFileName(const std::vector<std::string>& _fileName);

                    /**
                     * 判断参数 FileName 是否已赋值
                     * @return FileName 是否已赋值
                     * 
                     */
                    bool FileNameHasBeenSet() const;

                    /**
                     * 获取File Directory (regular expression); up to 200 characters in length, content base64 encoded.
                     * @return FileDirectory File Directory (regular expression); up to 200 characters in length, content base64 encoded.
                     * 
                     */
                    std::vector<std::string> GetFileDirectory() const;

                    /**
                     * 设置File Directory (regular expression); up to 200 characters in length, content base64 encoded.
                     * @param _fileDirectory File Directory (regular expression); up to 200 characters in length, content base64 encoded.
                     * 
                     */
                    void SetFileDirectory(const std::vector<std::string>& _fileDirectory);

                    /**
                     * 判断参数 FileDirectory 是否已赋值
                     * @return FileDirectory 是否已赋值
                     * 
                     */
                    bool FileDirectoryHasBeenSet() const;

                    /**
                     * 获取File Suffix; Up to 200 characters in length, content base64 escaped (deprecated).
                     * @return FileExtension File Suffix; Up to 200 characters in length, content base64 escaped (deprecated).
                     * 
                     */
                    std::vector<std::string> GetFileExtension() const;

                    /**
                     * 设置File Suffix; Up to 200 characters in length, content base64 escaped (deprecated).
                     * @param _fileExtension File Suffix; Up to 200 characters in length, content base64 escaped (deprecated).
                     * 
                     */
                    void SetFileExtension(const std::vector<std::string>& _fileExtension);

                    /**
                     * 判断参数 FileExtension 是否已赋值
                     * @return FileExtension 是否已赋值
                     * 
                     */
                    bool FileExtensionHasBeenSet() const;

                    /**
                     * 获取MD5 list
                     * @return Md5List MD5 list
                     * 
                     */
                    std::vector<std::string> GetMd5List() const;

                    /**
                     * 设置MD5 list
                     * @param _md5List MD5 list
                     * 
                     */
                    void SetMd5List(const std::vector<std::string>& _md5List);

                    /**
                     * 判断参数 Md5List 是否已赋值
                     * @return Md5List 是否已赋值
                     * 
                     */
                    bool Md5ListHasBeenSet() const;

                private:

                    /**
                     * Allowlist mode. 0: MD5 allowlist; 1: custom.
                     */
                    uint64_t m_mode;
                    bool m_modeHasBeenSet;

                    /**
                     * Unique rule ID
                     */
                    uint64_t m_id;
                    bool m_idHasBeenSet;

                    /**
                     * QUUID list
                     */
                    std::vector<std::string> m_quuidList;
                    bool m_quuidListHasBeenSet;

                    /**
                     * Whether the allowlist applies to all hosts. 0: no; 1: yes.
                     */
                    uint64_t m_isGlobal;
                    bool m_isGlobalHasBeenSet;

                    /**
                     * Matching pattern; 0 for exact match, 1 for fuzzy match (deprecated)
                     */
                    uint64_t m_matchType;
                    bool m_matchTypeHasBeenSet;

                    /**
                     * File Name (regular expression); up to 200 characters in length
                     */
                    std::vector<std::string> m_fileName;
                    bool m_fileNameHasBeenSet;

                    /**
                     * File Directory (regular expression); up to 200 characters in length, content base64 encoded.
                     */
                    std::vector<std::string> m_fileDirectory;
                    bool m_fileDirectoryHasBeenSet;

                    /**
                     * File Suffix; Up to 200 characters in length, content base64 escaped (deprecated).
                     */
                    std::vector<std::string> m_fileExtension;
                    bool m_fileExtensionHasBeenSet;

                    /**
                     * MD5 list
                     */
                    std::vector<std::string> m_md5List;
                    bool m_md5ListHasBeenSet;

                };
            }
        }
    }
}

#endif // !TENCENTCLOUD_CWP_V20180228_MODEL_MODIFYMALWAREWHITELISTREQUEST_H_

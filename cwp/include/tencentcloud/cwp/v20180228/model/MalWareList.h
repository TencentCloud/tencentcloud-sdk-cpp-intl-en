/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TENCENTCLOUD_CWP_V20180228_MODEL_MALWARELIST_H_
#define TENCENTCLOUD_CWP_V20180228_MODEL_MALWARELIST_H_

#include <string>
#include <vector>
#include <map>
#include <tencentcloud/core/utils/rapidjson/document.h>
#include <tencentcloud/core/utils/rapidjson/writer.h>
#include <tencentcloud/core/utils/rapidjson/stringbuffer.h>
#include <tencentcloud/core/AbstractModel.h>
#include <tencentcloud/cwp/v20180228/model/MachineExtraInfo.h>


namespace TencentCloud
{
    namespace Cwp
    {
        namespace V20180228
        {
            namespace Model
            {
                /**
                * Trojan list
                */
                class MalWareList : public AbstractModel
                {
                public:
                    MalWareList();
                    ~MalWareList() = default;
                    void ToJsonObject(rapidjson::Value &value, rapidjson::Document::AllocatorType& allocator) const;
                    CoreInternalOutcome Deserialize(const rapidjson::Value &value);


                    /**
                     * 获取Server IP address
                     * @return HostIp Server IP address
                     * 
                     */
                    std::string GetHostIp() const;

                    /**
                     * 设置Server IP address
                     * @param _hostIp Server IP address
                     * 
                     */
                    void SetHostIp(const std::string& _hostIp);

                    /**
                     * 判断参数 HostIp 是否已赋值
                     * @return HostIp 是否已赋值
                     * 
                     */
                    bool HostIpHasBeenSet() const;

                    /**
                     * 获取UUID
                     * @return Uuid UUID
                     * 
                     */
                    std::string GetUuid() const;

                    /**
                     * 设置UUID
                     * @param _uuid UUID
                     * 
                     */
                    void SetUuid(const std::string& _uuid);

                    /**
                     * 判断参数 Uuid 是否已赋值
                     * @return Uuid 是否已赋值
                     * 
                     */
                    bool UuidHasBeenSet() const;

                    /**
                     * 获取Path
                     * @return FilePath Path
                     * 
                     */
                    std::string GetFilePath() const;

                    /**
                     * 设置Path
                     * @param _filePath Path
                     * 
                     */
                    void SetFilePath(const std::string& _filePath);

                    /**
                     * 判断参数 FilePath 是否已赋值
                     * @return FilePath 是否已赋值
                     * 
                     */
                    bool FilePathHasBeenSet() const;

                    /**
                     * 获取Description
                     * @return VirusName Description
                     * 
                     */
                    std::string GetVirusName() const;

                    /**
                     * 设置Description
                     * @param _virusName Description
                     * 
                     */
                    void SetVirusName(const std::string& _virusName);

                    /**
                     * 判断参数 VirusName 是否已赋值
                     * @return VirusName 是否已赋值
                     * 
                     */
                    bool VirusNameHasBeenSet() const;

                    /**
                     * 获取Status: 4-Pending, 5-Trusted, 6-Isolated, 8-Files Deleted, 14-Processed.
                     * @return Status Status: 4-Pending, 5-Trusted, 6-Isolated, 8-Files Deleted, 14-Processed.
                     * 
                     */
                    uint64_t GetStatus() const;

                    /**
                     * 设置Status: 4-Pending, 5-Trusted, 6-Isolated, 8-Files Deleted, 14-Processed.
                     * @param _status Status: 4-Pending, 5-Trusted, 6-Isolated, 8-Files Deleted, 14-Processed.
                     * 
                     */
                    void SetStatus(const uint64_t& _status);

                    /**
                     * 判断参数 Status 是否已赋值
                     * @return Status 是否已赋值
                     * 
                     */
                    bool StatusHasBeenSet() const;

                    /**
                     * 获取Unique ID
Note: This field may return null, indicating that no valid values can be obtained.
                     * @return Id Unique ID
Note: This field may return null, indicating that no valid values can be obtained.
                     * 
                     */
                    uint64_t GetId() const;

                    /**
                     * 设置Unique ID
Note: This field may return null, indicating that no valid values can be obtained.
                     * @param _id Unique ID
Note: This field may return null, indicating that no valid values can be obtained.
                     * 
                     */
                    void SetId(const uint64_t& _id);

                    /**
                     * 判断参数 Id 是否已赋值
                     * @return Id 是否已赋值
                     * 
                     */
                    bool IdHasBeenSet() const;

                    /**
                     * 获取Host alias
                     * @return Alias Host alias
                     * 
                     */
                    std::string GetAlias() const;

                    /**
                     * 设置Host alias
                     * @param _alias Host alias
                     * 
                     */
                    void SetAlias(const std::string& _alias);

                    /**
                     * 判断参数 Alias 是否已赋值
                     * @return Alias 是否已赋值
                     * 
                     */
                    bool AliasHasBeenSet() const;

                    /**
                     * 获取Feature tag. This field has been deprecated, and no tag will be returned. Tags are returned in the details.
Note: This field may return null, indicating that no valid values can be obtained.
                     * @return Tags Feature tag. This field has been deprecated, and no tag will be returned. Tags are returned in the details.
Note: This field may return null, indicating that no valid values can be obtained.
                     * 
                     */
                    std::vector<std::string> GetTags() const;

                    /**
                     * 设置Feature tag. This field has been deprecated, and no tag will be returned. Tags are returned in the details.
Note: This field may return null, indicating that no valid values can be obtained.
                     * @param _tags Feature tag. This field has been deprecated, and no tag will be returned. Tags are returned in the details.
Note: This field may return null, indicating that no valid values can be obtained.
                     * 
                     */
                    void SetTags(const std::vector<std::string>& _tags);

                    /**
                     * 判断参数 Tags 是否已赋值
                     * @return Tags 是否已赋值
                     * 
                     */
                    bool TagsHasBeenSet() const;

                    /**
                     * 获取First running time
Note: This field may return null, indicating that no valid values can be obtained.
                     * @return FileCreateTime First running time
Note: This field may return null, indicating that no valid values can be obtained.
                     * 
                     */
                    std::string GetFileCreateTime() const;

                    /**
                     * 设置First running time
Note: This field may return null, indicating that no valid values can be obtained.
                     * @param _fileCreateTime First running time
Note: This field may return null, indicating that no valid values can be obtained.
                     * 
                     */
                    void SetFileCreateTime(const std::string& _fileCreateTime);

                    /**
                     * 判断参数 FileCreateTime 是否已赋值
                     * @return FileCreateTime 是否已赋值
                     * 
                     */
                    bool FileCreateTimeHasBeenSet() const;

                    /**
                     * 获取Last running time
Note: This field may return null, indicating that no valid values can be obtained.
                     * @return FileModifierTime Last running time
Note: This field may return null, indicating that no valid values can be obtained.
                     * 
                     */
                    std::string GetFileModifierTime() const;

                    /**
                     * 设置Last running time
Note: This field may return null, indicating that no valid values can be obtained.
                     * @param _fileModifierTime Last running time
Note: This field may return null, indicating that no valid values can be obtained.
                     * 
                     */
                    void SetFileModifierTime(const std::string& _fileModifierTime);

                    /**
                     * 判断参数 FileModifierTime 是否已赋值
                     * @return FileModifierTime 是否已赋值
                     * 
                     */
                    bool FileModifierTimeHasBeenSet() const;

                    /**
                     * 获取Creation time
                     * @return CreateTime Creation time
                     * 
                     */
                    std::string GetCreateTime() const;

                    /**
                     * 设置Creation time
                     * @param _createTime Creation time
                     * 
                     */
                    void SetCreateTime(const std::string& _createTime);

                    /**
                     * 判断参数 CreateTime 是否已赋值
                     * @return CreateTime 是否已赋值
                     * 
                     */
                    bool CreateTimeHasBeenSet() const;

                    /**
                     * 获取Last scan time
                     * @return LatestScanTime Last scan time
                     * 
                     */
                    std::string GetLatestScanTime() const;

                    /**
                     * 设置Last scan time
                     * @param _latestScanTime Last scan time
                     * 
                     */
                    void SetLatestScanTime(const std::string& _latestScanTime);

                    /**
                     * 判断参数 LatestScanTime 是否已赋值
                     * @return LatestScanTime 是否已赋值
                     * 
                     */
                    bool LatestScanTimeHasBeenSet() const;

                    /**
                     * 获取Risk level. 0: unknown; 1: low; 2: medium; 3: high; 4: critical.
                     * @return Level Risk level. 0: unknown; 1: low; 2: medium; 3: high; 4: critical.
                     * 
                     */
                    uint64_t GetLevel() const;

                    /**
                     * 设置Risk level. 0: unknown; 1: low; 2: medium; 3: high; 4: critical.
                     * @param _level Risk level. 0: unknown; 1: low; 2: medium; 3: high; 4: critical.
                     * 
                     */
                    void SetLevel(const uint64_t& _level);

                    /**
                     * 判断参数 Level 是否已赋值
                     * @return Level 是否已赋值
                     * 
                     */
                    bool LevelHasBeenSet() const;

                    /**
                     * 获取Trojan detection platforms, separated with commas. 1: cloud security engine; 2: TAV; 3: BinaryAI; 4: abnormal behavior; 5: threat intelligence.
                     * @return CheckPlatform Trojan detection platforms, separated with commas. 1: cloud security engine; 2: TAV; 3: BinaryAI; 4: abnormal behavior; 5: threat intelligence.
                     * 
                     */
                    std::string GetCheckPlatform() const;

                    /**
                     * 设置Trojan detection platforms, separated with commas. 1: cloud security engine; 2: TAV; 3: BinaryAI; 4: abnormal behavior; 5: threat intelligence.
                     * @param _checkPlatform Trojan detection platforms, separated with commas. 1: cloud security engine; 2: TAV; 3: BinaryAI; 4: abnormal behavior; 5: threat intelligence.
                     * 
                     */
                    void SetCheckPlatform(const std::string& _checkPlatform);

                    /**
                     * 判断参数 CheckPlatform 是否已赋值
                     * @return CheckPlatform 是否已赋值
                     * 
                     */
                    bool CheckPlatformHasBeenSet() const;

                    /**
                     * 获取Whether the Trojan process exists. 0: no; 1: yes.
                     * @return ProcessExists Whether the Trojan process exists. 0: no; 1: yes.
                     * 
                     */
                    uint64_t GetProcessExists() const;

                    /**
                     * 设置Whether the Trojan process exists. 0: no; 1: yes.
                     * @param _processExists Whether the Trojan process exists. 0: no; 1: yes.
                     * 
                     */
                    void SetProcessExists(const uint64_t& _processExists);

                    /**
                     * 判断参数 ProcessExists 是否已赋值
                     * @return ProcessExists 是否已赋值
                     * 
                     */
                    bool ProcessExistsHasBeenSet() const;

                    /**
                     * 获取Whether the Trojan file exists. 0: no; 1: yes.
                     * @return FileExists Whether the Trojan file exists. 0: no; 1: yes.
                     * 
                     */
                    uint64_t GetFileExists() const;

                    /**
                     * 设置Whether the Trojan file exists. 0: no; 1: yes.
                     * @param _fileExists Whether the Trojan file exists. 0: no; 1: yes.
                     * 
                     */
                    void SetFileExists(const uint64_t& _fileExists);

                    /**
                     * 判断参数 FileExists 是否已赋值
                     * @return FileExists 是否已赋值
                     * 
                     */
                    bool FileExistsHasBeenSet() const;

                    /**
                     * 获取cvm quuid
                     * @return Quuid cvm quuid
                     * 
                     */
                    std::string GetQuuid() const;

                    /**
                     * 设置cvm quuid
                     * @param _quuid cvm quuid
                     * 
                     */
                    void SetQuuid(const std::string& _quuid);

                    /**
                     * 判断参数 Quuid 是否已赋值
                     * @return Quuid 是否已赋值
                     * 
                     */
                    bool QuuidHasBeenSet() const;

                    /**
                     * 获取Trojan sample MD5
                     * @return MD5 Trojan sample MD5
                     * 
                     */
                    std::string GetMD5() const;

                    /**
                     * 设置Trojan sample MD5
                     * @param _mD5 Trojan sample MD5
                     * 
                     */
                    void SetMD5(const std::string& _mD5);

                    /**
                     * 判断参数 MD5 是否已赋值
                     * @return MD5 是否已赋值
                     * 
                     */
                    bool MD5HasBeenSet() const;

                    /**
                     * 获取Additional information
Note: This field may return null, indicating that no valid values can be obtained.
                     * @return MachineExtraInfo Additional information
Note: This field may return null, indicating that no valid values can be obtained.
                     * 
                     */
                    MachineExtraInfo GetMachineExtraInfo() const;

                    /**
                     * 设置Additional information
Note: This field may return null, indicating that no valid values can be obtained.
                     * @param _machineExtraInfo Additional information
Note: This field may return null, indicating that no valid values can be obtained.
                     * 
                     */
                    void SetMachineExtraInfo(const MachineExtraInfo& _machineExtraInfo);

                    /**
                     * 判断参数 MachineExtraInfo 是否已赋值
                     * @return MachineExtraInfo 是否已赋值
                     * 
                     */
                    bool MachineExtraInfoHasBeenSet() const;

                private:

                    /**
                     * Server IP address
                     */
                    std::string m_hostIp;
                    bool m_hostIpHasBeenSet;

                    /**
                     * UUID
                     */
                    std::string m_uuid;
                    bool m_uuidHasBeenSet;

                    /**
                     * Path
                     */
                    std::string m_filePath;
                    bool m_filePathHasBeenSet;

                    /**
                     * Description
                     */
                    std::string m_virusName;
                    bool m_virusNameHasBeenSet;

                    /**
                     * Status: 4-Pending, 5-Trusted, 6-Isolated, 8-Files Deleted, 14-Processed.
                     */
                    uint64_t m_status;
                    bool m_statusHasBeenSet;

                    /**
                     * Unique ID
Note: This field may return null, indicating that no valid values can be obtained.
                     */
                    uint64_t m_id;
                    bool m_idHasBeenSet;

                    /**
                     * Host alias
                     */
                    std::string m_alias;
                    bool m_aliasHasBeenSet;

                    /**
                     * Feature tag. This field has been deprecated, and no tag will be returned. Tags are returned in the details.
Note: This field may return null, indicating that no valid values can be obtained.
                     */
                    std::vector<std::string> m_tags;
                    bool m_tagsHasBeenSet;

                    /**
                     * First running time
Note: This field may return null, indicating that no valid values can be obtained.
                     */
                    std::string m_fileCreateTime;
                    bool m_fileCreateTimeHasBeenSet;

                    /**
                     * Last running time
Note: This field may return null, indicating that no valid values can be obtained.
                     */
                    std::string m_fileModifierTime;
                    bool m_fileModifierTimeHasBeenSet;

                    /**
                     * Creation time
                     */
                    std::string m_createTime;
                    bool m_createTimeHasBeenSet;

                    /**
                     * Last scan time
                     */
                    std::string m_latestScanTime;
                    bool m_latestScanTimeHasBeenSet;

                    /**
                     * Risk level. 0: unknown; 1: low; 2: medium; 3: high; 4: critical.
                     */
                    uint64_t m_level;
                    bool m_levelHasBeenSet;

                    /**
                     * Trojan detection platforms, separated with commas. 1: cloud security engine; 2: TAV; 3: BinaryAI; 4: abnormal behavior; 5: threat intelligence.
                     */
                    std::string m_checkPlatform;
                    bool m_checkPlatformHasBeenSet;

                    /**
                     * Whether the Trojan process exists. 0: no; 1: yes.
                     */
                    uint64_t m_processExists;
                    bool m_processExistsHasBeenSet;

                    /**
                     * Whether the Trojan file exists. 0: no; 1: yes.
                     */
                    uint64_t m_fileExists;
                    bool m_fileExistsHasBeenSet;

                    /**
                     * cvm quuid
                     */
                    std::string m_quuid;
                    bool m_quuidHasBeenSet;

                    /**
                     * Trojan sample MD5
                     */
                    std::string m_mD5;
                    bool m_mD5HasBeenSet;

                    /**
                     * Additional information
Note: This field may return null, indicating that no valid values can be obtained.
                     */
                    MachineExtraInfo m_machineExtraInfo;
                    bool m_machineExtraInfoHasBeenSet;

                };
            }
        }
    }
}

#endif // !TENCENTCLOUD_CWP_V20180228_MODEL_MALWARELIST_H_

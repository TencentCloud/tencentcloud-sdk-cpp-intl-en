/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TENCENTCLOUD_CWP_V20180228_MODEL_CREATESCANMALWARESETTINGREQUEST_H_
#define TENCENTCLOUD_CWP_V20180228_MODEL_CREATESCANMALWARESETTINGREQUEST_H_

#include <string>
#include <vector>
#include <map>
#include <tencentcloud/core/AbstractModel.h>


namespace TencentCloud
{
    namespace Cwp
    {
        namespace V20180228
        {
            namespace Model
            {
                /**
                * CreateScanMalwareSetting request structure.
                */
                class CreateScanMalwareSettingRequest : public AbstractModel
                {
                public:
                    CreateScanMalwareSettingRequest();
                    ~CreateScanMalwareSettingRequest() = default;
                    std::string ToJsonString() const;


                    /**
                     * 获取Scan mode: 0 - full disk scan; 1 - rapid scan
                     * @return ScanPattern Scan mode: 0 - full disk scan; 1 - rapid scan
                     * 
                     */
                    uint64_t GetScanPattern() const;

                    /**
                     * 设置Scan mode: 0 - full disk scan; 1 - rapid scan
                     * @param _scanPattern Scan mode: 0 - full disk scan; 1 - rapid scan
                     * 
                     */
                    void SetScanPattern(const uint64_t& _scanPattern);

                    /**
                     * 判断参数 ScanPattern 是否已赋值
                     * @return ScanPattern 是否已赋值
                     * 
                     */
                    bool ScanPatternHasBeenSet() const;

                    /**
                     * 获取Server classification: 1: Professional Edition servers; 2: self-selected servers
                     * @return HostType Server classification: 1: Professional Edition servers; 2: self-selected servers
                     * 
                     */
                    int64_t GetHostType() const;

                    /**
                     * 设置Server classification: 1: Professional Edition servers; 2: self-selected servers
                     * @param _hostType Server classification: 1: Professional Edition servers; 2: self-selected servers
                     * 
                     */
                    void SetHostType(const int64_t& _hostType);

                    /**
                     * 判断参数 HostType 是否已赋值
                     * @return HostType 是否已赋值
                     * 
                     */
                    bool HostTypeHasBeenSet() const;

                    /**
                     * 获取Effective for selected servers; a string array of host QUUIDs
                     * @return QuuidList Effective for selected servers; a string array of host QUUIDs
                     * 
                     */
                    std::vector<std::string> GetQuuidList() const;

                    /**
                     * 设置Effective for selected servers; a string array of host QUUIDs
                     * @param _quuidList Effective for selected servers; a string array of host QUUIDs
                     * 
                     */
                    void SetQuuidList(const std::vector<std::string>& _quuidList);

                    /**
                     * 判断参数 QuuidList 是否已赋值
                     * @return QuuidList 是否已赋值
                     * 
                     */
                    bool QuuidListHasBeenSet() const;

                    /**
                     * 获取Timeout unit: seconds, which is 3,600 seconds by default.
                     * @return TimeoutPeriod Timeout unit: seconds, which is 3,600 seconds by default.
                     * 
                     */
                    uint64_t GetTimeoutPeriod() const;

                    /**
                     * 设置Timeout unit: seconds, which is 3,600 seconds by default.
                     * @param _timeoutPeriod Timeout unit: seconds, which is 3,600 seconds by default.
                     * 
                     */
                    void SetTimeoutPeriod(const uint64_t& _timeoutPeriod);

                    /**
                     * 判断参数 TimeoutPeriod 是否已赋值
                     * @return TimeoutPeriod 是否已赋值
                     * 
                     */
                    bool TimeoutPeriodHasBeenSet() const;

                    /**
                     * 获取1 - standard mode (only critical and high-risk are reported.); 2 - enhanced mode (critical, high-risk, and medium-risk are reported.); 3 - strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
                     * @return EngineType 1 - standard mode (only critical and high-risk are reported.); 2 - enhanced mode (critical, high-risk, and medium-risk are reported.); 3 - strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
                     * 
                     */
                    uint64_t GetEngineType() const;

                    /**
                     * 设置1 - standard mode (only critical and high-risk are reported.); 2 - enhanced mode (critical, high-risk, and medium-risk are reported.); 3 - strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
                     * @param _engineType 1 - standard mode (only critical and high-risk are reported.); 2 - enhanced mode (critical, high-risk, and medium-risk are reported.); 3 - strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
                     * 
                     */
                    void SetEngineType(const uint64_t& _engineType);

                    /**
                     * 判断参数 EngineType 是否已赋值
                     * @return EngineType 是否已赋值
                     * 
                     */
                    bool EngineTypeHasBeenSet() const;

                    /**
                     * 获取Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
                     * @return EnableMemShellScan Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
                     * 
                     */
                    int64_t GetEnableMemShellScan() const;

                    /**
                     * 设置Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
                     * @param _enableMemShellScan Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
                     * 
                     */
                    void SetEnableMemShellScan(const int64_t& _enableMemShellScan);

                    /**
                     * 判断参数 EnableMemShellScan 是否已赋值
                     * @return EnableMemShellScan 是否已赋值
                     * 
                     */
                    bool EnableMemShellScanHasBeenSet() const;

                private:

                    /**
                     * Scan mode: 0 - full disk scan; 1 - rapid scan
                     */
                    uint64_t m_scanPattern;
                    bool m_scanPatternHasBeenSet;

                    /**
                     * Server classification: 1: Professional Edition servers; 2: self-selected servers
                     */
                    int64_t m_hostType;
                    bool m_hostTypeHasBeenSet;

                    /**
                     * Effective for selected servers; a string array of host QUUIDs
                     */
                    std::vector<std::string> m_quuidList;
                    bool m_quuidListHasBeenSet;

                    /**
                     * Timeout unit: seconds, which is 3,600 seconds by default.
                     */
                    uint64_t m_timeoutPeriod;
                    bool m_timeoutPeriodHasBeenSet;

                    /**
                     * 1 - standard mode (only critical and high-risk are reported.); 2 - enhanced mode (critical, high-risk, and medium-risk are reported.); 3 - strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
                     */
                    uint64_t m_engineType;
                    bool m_engineTypeHasBeenSet;

                    /**
                     * Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
                     */
                    int64_t m_enableMemShellScan;
                    bool m_enableMemShellScanHasBeenSet;

                };
            }
        }
    }
}

#endif // !TENCENTCLOUD_CWP_V20180228_MODEL_CREATESCANMALWARESETTINGREQUEST_H_

/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TENCENTCLOUD_VOD_V20180717_MODEL_REBUILDMEDIATARGETINFO_H_
#define TENCENTCLOUD_VOD_V20180717_MODEL_REBUILDMEDIATARGETINFO_H_

#include <string>
#include <vector>
#include <map>
#include <tencentcloud/core/utils/rapidjson/document.h>
#include <tencentcloud/core/utils/rapidjson/writer.h>
#include <tencentcloud/core/utils/rapidjson/stringbuffer.h>
#include <tencentcloud/core/AbstractModel.h>
#include <tencentcloud/vod/v20180717/model/RebuildMediaTargetVideoStream.h>
#include <tencentcloud/vod/v20180717/model/RebuildMediaTargetAudioStream.h>


namespace TencentCloud
{
    namespace Vod
    {
        namespace V20180717
        {
            namespace Model
            {
                /**
                * The parameters of an audio/video remastering output file.
                */
                class RebuildMediaTargetInfo : public AbstractModel
                {
                public:
                    RebuildMediaTargetInfo();
                    ~RebuildMediaTargetInfo() = default;
                    void ToJsonObject(rapidjson::Value &value, rapidjson::Document::AllocatorType& allocator) const;
                    CoreInternalOutcome Deserialize(const rapidjson::Value &value);


                    /**
                     * 获取The filename. This parameter can contain up to 64 characters, and will be generated by the system if it is left empty.
                     * @return MediaName The filename. This parameter can contain up to 64 characters, and will be generated by the system if it is left empty.
                     * 
                     */
                    std::string GetMediaName() const;

                    /**
                     * 设置The filename. This parameter can contain up to 64 characters, and will be generated by the system if it is left empty.
                     * @param _mediaName The filename. This parameter can contain up to 64 characters, and will be generated by the system if it is left empty.
                     * 
                     */
                    void SetMediaName(const std::string& _mediaName);

                    /**
                     * 判断参数 MediaName 是否已赋值
                     * @return MediaName 是否已赋值
                     * 
                     */
                    bool MediaNameHasBeenSet() const;

                    /**
                     * 获取The description (up to 128 characters). If you do not specify this, the description will be empty.
                     * @return Description The description (up to 128 characters). If you do not specify this, the description will be empty.
                     * 
                     */
                    std::string GetDescription() const;

                    /**
                     * 设置The description (up to 128 characters). If you do not specify this, the description will be empty.
                     * @param _description The description (up to 128 characters). If you do not specify this, the description will be empty.
                     * 
                     */
                    void SetDescription(const std::string& _description);

                    /**
                     * 判断参数 Description 是否已赋值
                     * @return Description 是否已赋值
                     * 
                     */
                    bool DescriptionHasBeenSet() const;

                    /**
                     * 获取The ID of the file’s category. You can use the [CreateClass](https://intl.cloud.tencent.com/document/product/266/7812?from_cn_redirect=1) API to create a category and get the category ID.
<li>The default value is `0`, which means the “Other” category.</li>
                     * @return ClassId The ID of the file’s category. You can use the [CreateClass](https://intl.cloud.tencent.com/document/product/266/7812?from_cn_redirect=1) API to create a category and get the category ID.
<li>The default value is `0`, which means the “Other” category.</li>
                     * 
                     */
                    int64_t GetClassId() const;

                    /**
                     * 设置The ID of the file’s category. You can use the [CreateClass](https://intl.cloud.tencent.com/document/product/266/7812?from_cn_redirect=1) API to create a category and get the category ID.
<li>The default value is `0`, which means the “Other” category.</li>
                     * @param _classId The ID of the file’s category. You can use the [CreateClass](https://intl.cloud.tencent.com/document/product/266/7812?from_cn_redirect=1) API to create a category and get the category ID.
<li>The default value is `0`, which means the “Other” category.</li>
                     * 
                     */
                    void SetClassId(const int64_t& _classId);

                    /**
                     * 判断参数 ClassId 是否已赋值
                     * @return ClassId 是否已赋值
                     * 
                     */
                    bool ClassIdHasBeenSet() const;

                    /**
                     * 获取The expiration time of the output file, in [ISO date format](https://intl.cloud.tencent.com/document/product/266/11732?lang=en&pg=). The file will be deleted after the specified expiration time. By default, the file will never expire.
                     * @return ExpireTime The expiration time of the output file, in [ISO date format](https://intl.cloud.tencent.com/document/product/266/11732?lang=en&pg=). The file will be deleted after the specified expiration time. By default, the file will never expire.
                     * 
                     */
                    std::string GetExpireTime() const;

                    /**
                     * 设置The expiration time of the output file, in [ISO date format](https://intl.cloud.tencent.com/document/product/266/11732?lang=en&pg=). The file will be deleted after the specified expiration time. By default, the file will never expire.
                     * @param _expireTime The expiration time of the output file, in [ISO date format](https://intl.cloud.tencent.com/document/product/266/11732?lang=en&pg=). The file will be deleted after the specified expiration time. By default, the file will never expire.
                     * 
                     */
                    void SetExpireTime(const std::string& _expireTime);

                    /**
                     * 判断参数 ExpireTime 是否已赋值
                     * @return ExpireTime 是否已赋值
                     * 
                     */
                    bool ExpireTimeHasBeenSet() const;

                    /**
                     * 获取The output container format. Valid values: `mp4` (default), `flv`, `hls`.
                     * @return Container The output container format. Valid values: `mp4` (default), `flv`, `hls`.
                     * 
                     */
                    std::string GetContainer() const;

                    /**
                     * 设置The output container format. Valid values: `mp4` (default), `flv`, `hls`.
                     * @param _container The output container format. Valid values: `mp4` (default), `flv`, `hls`.
                     * 
                     */
                    void SetContainer(const std::string& _container);

                    /**
                     * 判断参数 Container 是否已赋值
                     * @return Container 是否已赋值
                     * 
                     */
                    bool ContainerHasBeenSet() const;

                    /**
                     * 获取The output video parameters.
                     * @return VideoStream The output video parameters.
                     * 
                     */
                    RebuildMediaTargetVideoStream GetVideoStream() const;

                    /**
                     * 设置The output video parameters.
                     * @param _videoStream The output video parameters.
                     * 
                     */
                    void SetVideoStream(const RebuildMediaTargetVideoStream& _videoStream);

                    /**
                     * 判断参数 VideoStream 是否已赋值
                     * @return VideoStream 是否已赋值
                     * 
                     */
                    bool VideoStreamHasBeenSet() const;

                    /**
                     * 获取The output audio parameters.
                     * @return AudioStream The output audio parameters.
                     * 
                     */
                    RebuildMediaTargetAudioStream GetAudioStream() const;

                    /**
                     * 设置The output audio parameters.
                     * @param _audioStream The output audio parameters.
                     * 
                     */
                    void SetAudioStream(const RebuildMediaTargetAudioStream& _audioStream);

                    /**
                     * 判断参数 AudioStream 是否已赋值
                     * @return AudioStream 是否已赋值
                     * 
                     */
                    bool AudioStreamHasBeenSet() const;

                    /**
                     * 获取Whether to remove video data. Valid values:
<li>`0`: No</li>
<li>`1`: Yes</li>

Default value: `0`.
                     * @return RemoveVideo Whether to remove video data. Valid values:
<li>`0`: No</li>
<li>`1`: Yes</li>

Default value: `0`.
                     * 
                     */
                    int64_t GetRemoveVideo() const;

                    /**
                     * 设置Whether to remove video data. Valid values:
<li>`0`: No</li>
<li>`1`: Yes</li>

Default value: `0`.
                     * @param _removeVideo Whether to remove video data. Valid values:
<li>`0`: No</li>
<li>`1`: Yes</li>

Default value: `0`.
                     * 
                     */
                    void SetRemoveVideo(const int64_t& _removeVideo);

                    /**
                     * 判断参数 RemoveVideo 是否已赋值
                     * @return RemoveVideo 是否已赋值
                     * 
                     */
                    bool RemoveVideoHasBeenSet() const;

                    /**
                     * 获取Whether to remove audio data. Valid values:
<li>`0`: No</li>
<li>`1`: Yes</li>

Default value: `0`.
                     * @return RemoveAudio Whether to remove audio data. Valid values:
<li>`0`: No</li>
<li>`1`: Yes</li>

Default value: `0`.
                     * 
                     */
                    int64_t GetRemoveAudio() const;

                    /**
                     * 设置Whether to remove audio data. Valid values:
<li>`0`: No</li>
<li>`1`: Yes</li>

Default value: `0`.
                     * @param _removeAudio Whether to remove audio data. Valid values:
<li>`0`: No</li>
<li>`1`: Yes</li>

Default value: `0`.
                     * 
                     */
                    void SetRemoveAudio(const int64_t& _removeAudio);

                    /**
                     * 判断参数 RemoveAudio 是否已赋值
                     * @return RemoveAudio 是否已赋值
                     * 
                     */
                    bool RemoveAudioHasBeenSet() const;

                private:

                    /**
                     * The filename. This parameter can contain up to 64 characters, and will be generated by the system if it is left empty.
                     */
                    std::string m_mediaName;
                    bool m_mediaNameHasBeenSet;

                    /**
                     * The description (up to 128 characters). If you do not specify this, the description will be empty.
                     */
                    std::string m_description;
                    bool m_descriptionHasBeenSet;

                    /**
                     * The ID of the file’s category. You can use the [CreateClass](https://intl.cloud.tencent.com/document/product/266/7812?from_cn_redirect=1) API to create a category and get the category ID.
<li>The default value is `0`, which means the “Other” category.</li>
                     */
                    int64_t m_classId;
                    bool m_classIdHasBeenSet;

                    /**
                     * The expiration time of the output file, in [ISO date format](https://intl.cloud.tencent.com/document/product/266/11732?lang=en&pg=). The file will be deleted after the specified expiration time. By default, the file will never expire.
                     */
                    std::string m_expireTime;
                    bool m_expireTimeHasBeenSet;

                    /**
                     * The output container format. Valid values: `mp4` (default), `flv`, `hls`.
                     */
                    std::string m_container;
                    bool m_containerHasBeenSet;

                    /**
                     * The output video parameters.
                     */
                    RebuildMediaTargetVideoStream m_videoStream;
                    bool m_videoStreamHasBeenSet;

                    /**
                     * The output audio parameters.
                     */
                    RebuildMediaTargetAudioStream m_audioStream;
                    bool m_audioStreamHasBeenSet;

                    /**
                     * Whether to remove video data. Valid values:
<li>`0`: No</li>
<li>`1`: Yes</li>

Default value: `0`.
                     */
                    int64_t m_removeVideo;
                    bool m_removeVideoHasBeenSet;

                    /**
                     * Whether to remove audio data. Valid values:
<li>`0`: No</li>
<li>`1`: Yes</li>

Default value: `0`.
                     */
                    int64_t m_removeAudio;
                    bool m_removeAudioHasBeenSet;

                };
            }
        }
    }
}

#endif // !TENCENTCLOUD_VOD_V20180717_MODEL_REBUILDMEDIATARGETINFO_H_

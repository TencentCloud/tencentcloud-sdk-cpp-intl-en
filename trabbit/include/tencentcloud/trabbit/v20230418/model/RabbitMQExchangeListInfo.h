/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TENCENTCLOUD_TRABBIT_V20230418_MODEL_RABBITMQEXCHANGELISTINFO_H_
#define TENCENTCLOUD_TRABBIT_V20230418_MODEL_RABBITMQEXCHANGELISTINFO_H_

#include <string>
#include <vector>
#include <map>
#include <tencentcloud/core/utils/rapidjson/document.h>
#include <tencentcloud/core/utils/rapidjson/writer.h>
#include <tencentcloud/core/utils/rapidjson/stringbuffer.h>
#include <tencentcloud/core/AbstractModel.h>


namespace TencentCloud
{
    namespace Trabbit
    {
        namespace V20230418
        {
            namespace Model
            {
                /**
                * RabbitMQ exchange list member information.
                */
                class RabbitMQExchangeListInfo : public AbstractModel
                {
                public:
                    RabbitMQExchangeListInfo();
                    ~RabbitMQExchangeListInfo() = default;
                    void ToJsonObject(rapidjson::Value &value, rapidjson::Document::AllocatorType& allocator) const;
                    CoreInternalOutcome Deserialize(const rapidjson::Value &value);


                    /**
                     * 获取exchange name.
                     * @return ExchangeName exchange name.
                     * 
                     */
                    std::string GetExchangeName() const;

                    /**
                     * 设置exchange name.
                     * @param _exchangeName exchange name.
                     * 
                     */
                    void SetExchangeName(const std::string& _exchangeName);

                    /**
                     * 判断参数 ExchangeName 是否已赋值
                     * @return ExchangeName 是否已赋值
                     * 
                     */
                    bool ExchangeNameHasBeenSet() const;

                    /**
                     * 获取Remarks.
                     * @return Remark Remarks.
                     * 
                     */
                    std::string GetRemark() const;

                    /**
                     * 设置Remarks.
                     * @param _remark Remarks.
                     * 
                     */
                    void SetRemark(const std::string& _remark);

                    /**
                     * 判断参数 Remark 是否已赋值
                     * @return Remark 是否已赋值
                     * 
                     */
                    bool RemarkHasBeenSet() const;

                    /**
                     * 获取Specifies the exchange type. valid values: "fanout", "direct", "topic", "headers".
                     * @return ExchangeType Specifies the exchange type. valid values: "fanout", "direct", "topic", "headers".
                     * 
                     */
                    std::string GetExchangeType() const;

                    /**
                     * 设置Specifies the exchange type. valid values: "fanout", "direct", "topic", "headers".
                     * @param _exchangeType Specifies the exchange type. valid values: "fanout", "direct", "topic", "headers".
                     * 
                     */
                    void SetExchangeType(const std::string& _exchangeType);

                    /**
                     * 判断参数 ExchangeType 是否已赋值
                     * @return ExchangeType 是否已赋值
                     * 
                     */
                    bool ExchangeTypeHasBeenSet() const;

                    /**
                     * 获取VHost parameter.
                     * @return VirtualHost VHost parameter.
                     * 
                     */
                    std::string GetVirtualHost() const;

                    /**
                     * 设置VHost parameter.
                     * @param _virtualHost VHost parameter.
                     * 
                     */
                    void SetVirtualHost(const std::string& _virtualHost);

                    /**
                     * 判断参数 VirtualHost 是否已赋值
                     * @return VirtualHost 是否已赋值
                     * 
                     */
                    bool VirtualHostHasBeenSet() const;

                    /**
                     * 获取exchange creator. valid values: `system` (generated by the system), `user` (user-created).
                     * @return ExchangeCreator exchange creator. valid values: `system` (generated by the system), `user` (user-created).
                     * 
                     */
                    std::string GetExchangeCreator() const;

                    /**
                     * 设置exchange creator. valid values: `system` (generated by the system), `user` (user-created).
                     * @param _exchangeCreator exchange creator. valid values: `system` (generated by the system), `user` (user-created).
                     * 
                     */
                    void SetExchangeCreator(const std::string& _exchangeCreator);

                    /**
                     * 判断参数 ExchangeCreator 是否已赋值
                     * @return ExchangeCreator 是否已赋值
                     * 
                     */
                    bool ExchangeCreatorHasBeenSet() const;

                    /**
                     * 获取exchange creation time.
                     * @return CreateTimeStamp exchange creation time.
                     * 
                     */
                    std::string GetCreateTimeStamp() const;

                    /**
                     * 设置exchange creation time.
                     * @param _createTimeStamp exchange creation time.
                     * 
                     */
                    void SetCreateTimeStamp(const std::string& _createTimeStamp);

                    /**
                     * 判断参数 CreateTimeStamp 是否已赋值
                     * @return CreateTimeStamp 是否已赋值
                     * 
                     */
                    bool CreateTimeStampHasBeenSet() const;

                    /**
                     * 获取exchange modification time.
                     * @return ModTimeStamp exchange modification time.
                     * 
                     */
                    std::string GetModTimeStamp() const;

                    /**
                     * 设置exchange modification time.
                     * @param _modTimeStamp exchange modification time.
                     * 
                     */
                    void SetModTimeStamp(const std::string& _modTimeStamp);

                    /**
                     * 判断参数 ModTimeStamp 是否已赋值
                     * @return ModTimeStamp 是否已赋值
                     * 
                     */
                    bool ModTimeStampHasBeenSet() const;

                    /**
                     * 获取Input message rate.
                     * @return MessageRateIn Input message rate.
                     * 
                     */
                    double GetMessageRateIn() const;

                    /**
                     * 设置Input message rate.
                     * @param _messageRateIn Input message rate.
                     * 
                     */
                    void SetMessageRateIn(const double& _messageRateIn);

                    /**
                     * 判断参数 MessageRateIn 是否已赋值
                     * @return MessageRateIn 是否已赋值
                     * 
                     */
                    bool MessageRateInHasBeenSet() const;

                    /**
                     * 获取Output message rate.
                     * @return MessageRateOut Output message rate.
                     * 
                     */
                    double GetMessageRateOut() const;

                    /**
                     * 设置Output message rate.
                     * @param _messageRateOut Output message rate.
                     * 
                     */
                    void SetMessageRateOut(const double& _messageRateOut);

                    /**
                     * 判断参数 MessageRateOut 是否已赋值
                     * @return MessageRateOut 是否已赋值
                     * 
                     */
                    bool MessageRateOutHasBeenSet() const;

                    /**
                     * 获取Specifies whether it is a persistent exchange. true indicates persistent, and false indicates non-persistent.
                     * @return Durable Specifies whether it is a persistent exchange. true indicates persistent, and false indicates non-persistent.
                     * 
                     */
                    bool GetDurable() const;

                    /**
                     * 设置Specifies whether it is a persistent exchange. true indicates persistent, and false indicates non-persistent.
                     * @param _durable Specifies whether it is a persistent exchange. true indicates persistent, and false indicates non-persistent.
                     * 
                     */
                    void SetDurable(const bool& _durable);

                    /**
                     * 判断参数 Durable 是否已赋值
                     * @return Durable 是否已赋值
                     * 
                     */
                    bool DurableHasBeenSet() const;

                    /**
                     * 获取Specifies whether to automatically delete the switch. true indicates automatic deletion, and false indicates non-automatic deletion.
                     * @return AutoDelete Specifies whether to automatically delete the switch. true indicates automatic deletion, and false indicates non-automatic deletion.
                     * 
                     */
                    bool GetAutoDelete() const;

                    /**
                     * 设置Specifies whether to automatically delete the switch. true indicates automatic deletion, and false indicates non-automatic deletion.
                     * @param _autoDelete Specifies whether to automatically delete the switch. true indicates automatic deletion, and false indicates non-automatic deletion.
                     * 
                     */
                    void SetAutoDelete(const bool& _autoDelete);

                    /**
                     * 判断参数 AutoDelete 是否已赋值
                     * @return AutoDelete 是否已赋值
                     * 
                     */
                    bool AutoDeleteHasBeenSet() const;

                    /**
                     * 获取Whether it is an internal switch. valid values: true (indicating an internal switch).
                     * @return Internal Whether it is an internal switch. valid values: true (indicating an internal switch).
                     * 
                     */
                    bool GetInternal() const;

                    /**
                     * 设置Whether it is an internal switch. valid values: true (indicating an internal switch).
                     * @param _internal Whether it is an internal switch. valid values: true (indicating an internal switch).
                     * 
                     */
                    void SetInternal(const bool& _internal);

                    /**
                     * 判断参数 Internal 是否已赋值
                     * @return Internal 是否已赋值
                     * 
                     */
                    bool InternalHasBeenSet() const;

                    /**
                     * 获取Specifies the ID of the associated instance to which the switch belongs.
                     * @return InstanceId Specifies the ID of the associated instance to which the switch belongs.
                     * 
                     */
                    std::string GetInstanceId() const;

                    /**
                     * 设置Specifies the ID of the associated instance to which the switch belongs.
                     * @param _instanceId Specifies the ID of the associated instance to which the switch belongs.
                     * 
                     */
                    void SetInstanceId(const std::string& _instanceId);

                    /**
                     * 判断参数 InstanceId 是否已赋值
                     * @return InstanceId 是否已赋值
                     * 
                     */
                    bool InstanceIdHasBeenSet() const;

                    /**
                     * 获取The name of the effective policy.
                     * @return Policy The name of the effective policy.
                     * 
                     */
                    std::string GetPolicy() const;

                    /**
                     * 设置The name of the effective policy.
                     * @param _policy The name of the effective policy.
                     * 
                     */
                    void SetPolicy(const std::string& _policy);

                    /**
                     * 判断参数 Policy 是否已赋值
                     * @return Policy 是否已赋值
                     * 
                     */
                    bool PolicyHasBeenSet() const;

                    /**
                     * 获取Additional parameters key-value objects.
                     * @return Arguments Additional parameters key-value objects.
                     * 
                     */
                    std::string GetArguments() const;

                    /**
                     * 设置Additional parameters key-value objects.
                     * @param _arguments Additional parameters key-value objects.
                     * 
                     */
                    void SetArguments(const std::string& _arguments);

                    /**
                     * 判断参数 Arguments 是否已赋值
                     * @return Arguments 是否已赋值
                     * 
                     */
                    bool ArgumentsHasBeenSet() const;

                    /**
                     * 获取Number of unscheduled delayed messages.
                     * @return MessagesDelayed Number of unscheduled delayed messages.
                     * 
                     */
                    uint64_t GetMessagesDelayed() const;

                    /**
                     * 设置Number of unscheduled delayed messages.
                     * @param _messagesDelayed Number of unscheduled delayed messages.
                     * 
                     */
                    void SetMessagesDelayed(const uint64_t& _messagesDelayed);

                    /**
                     * 判断参数 MessagesDelayed 是否已赋值
                     * @return MessagesDelayed 是否已赋值
                     * 
                     */
                    bool MessagesDelayedHasBeenSet() const;

                private:

                    /**
                     * exchange name.
                     */
                    std::string m_exchangeName;
                    bool m_exchangeNameHasBeenSet;

                    /**
                     * Remarks.
                     */
                    std::string m_remark;
                    bool m_remarkHasBeenSet;

                    /**
                     * Specifies the exchange type. valid values: "fanout", "direct", "topic", "headers".
                     */
                    std::string m_exchangeType;
                    bool m_exchangeTypeHasBeenSet;

                    /**
                     * VHost parameter.
                     */
                    std::string m_virtualHost;
                    bool m_virtualHostHasBeenSet;

                    /**
                     * exchange creator. valid values: `system` (generated by the system), `user` (user-created).
                     */
                    std::string m_exchangeCreator;
                    bool m_exchangeCreatorHasBeenSet;

                    /**
                     * exchange creation time.
                     */
                    std::string m_createTimeStamp;
                    bool m_createTimeStampHasBeenSet;

                    /**
                     * exchange modification time.
                     */
                    std::string m_modTimeStamp;
                    bool m_modTimeStampHasBeenSet;

                    /**
                     * Input message rate.
                     */
                    double m_messageRateIn;
                    bool m_messageRateInHasBeenSet;

                    /**
                     * Output message rate.
                     */
                    double m_messageRateOut;
                    bool m_messageRateOutHasBeenSet;

                    /**
                     * Specifies whether it is a persistent exchange. true indicates persistent, and false indicates non-persistent.
                     */
                    bool m_durable;
                    bool m_durableHasBeenSet;

                    /**
                     * Specifies whether to automatically delete the switch. true indicates automatic deletion, and false indicates non-automatic deletion.
                     */
                    bool m_autoDelete;
                    bool m_autoDeleteHasBeenSet;

                    /**
                     * Whether it is an internal switch. valid values: true (indicating an internal switch).
                     */
                    bool m_internal;
                    bool m_internalHasBeenSet;

                    /**
                     * Specifies the ID of the associated instance to which the switch belongs.
                     */
                    std::string m_instanceId;
                    bool m_instanceIdHasBeenSet;

                    /**
                     * The name of the effective policy.
                     */
                    std::string m_policy;
                    bool m_policyHasBeenSet;

                    /**
                     * Additional parameters key-value objects.
                     */
                    std::string m_arguments;
                    bool m_argumentsHasBeenSet;

                    /**
                     * Number of unscheduled delayed messages.
                     */
                    uint64_t m_messagesDelayed;
                    bool m_messagesDelayedHasBeenSet;

                };
            }
        }
    }
}

#endif // !TENCENTCLOUD_TRABBIT_V20230418_MODEL_RABBITMQEXCHANGELISTINFO_H_
